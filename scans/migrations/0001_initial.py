# Generated by Django 4.0.1 on 2022-01-11 19:00

from django.db import migrations, models
import django.db.models.deletion
import scans.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(blank=True, default='', max_length=100)),
                ('hostname_type', models.CharField(blank=True, default='', max_length=50, verbose_name='Host Type')),
                ('ip_address', models.GenericIPAddressField(protocol='IPv4', verbose_name='IP Address')),
                ('mac_address', models.CharField(blank=True, default='', max_length=30, verbose_name='MAC Address')),
                ('assessment_status_1', models.CharField(default='New', max_length=50, verbose_name='Test Status')),
                ('os_name', models.CharField(blank=True, default='', max_length=100)),
                ('os_family', models.CharField(blank=True, default='', max_length=100)),
                ('os_vendor', models.CharField(blank=True, default='', max_length=100)),
                ('os_gen', models.CharField(blank=True, default='', max_length=100)),
                ('os_type', models.CharField(blank=True, default='', max_length=100)),
                ('state', models.CharField(choices=[('up', 'Live'), ('dn', 'Down')], help_text='Host is live or down', max_length=2)),
                ('state_reason', models.CharField(blank=True, default='', max_length=100, verbose_name='state reason')),
                ('category', models.CharField(blank=True, default='', max_length=100)),
                ('criticality', models.SmallIntegerField(default=50, help_text='Asset importance/criticality score 1-100', verbose_name='Asset Criticality')),
                ('date_discovered', models.DateTimeField(auto_now=True, help_text='Date first seen/scanned')),
                ('date_last_seen', models.DateTimeField(auto_now=True, help_text='Date last seen/scanned')),
                ('count_scanned', models.SmallIntegerField(help_text='Number of times this host has been scanned')),
            ],
            options={
                'verbose_name': 'host',
                'verbose_name_plural': 'hosts',
                'ordering': ('ip_address',),
            },
        ),
        migrations.CreateModel(
            name='Scan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique_for_date='date_created', verbose_name='name')),
                ('arguments', models.TextField()),
                ('scan_start', models.DateTimeField(verbose_name='Scan Start')),
                ('scan_end', models.DateTimeField(verbose_name='Scan End')),
                ('duration', models.DurationField()),
                ('nmap_version', models.CharField(max_length=20)),
                ('xml_version', models.CharField(max_length=20)),
                ('count_live_hosts', models.IntegerField(verbose_name='Live Hosts')),
                ('scan_file', models.FileField(help_text='Nmap XML file', upload_to=scans.models.set_files_path, verbose_name='scan file')),
                ('scan_md5', models.CharField(help_text='MD5 hash of the XML file used for this scan record', max_length=32, verbose_name='MD5')),
                ('notes', models.TextField(blank=True, default='')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'scan',
                'verbose_name_plural': 'scans',
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='ScanPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=75, unique=True, verbose_name='name')),
                ('scan_type', models.CharField(default='Discovery', max_length=50, verbose_name='scan type')),
                ('arguments', models.TextField(help_text='nmap scan command arguments', verbose_name='arguments')),
                ('output_filename', models.CharField(default='nmap-scan-date.xml', max_length=150, verbose_name='output filename')),
                ('notes', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'scan policy',
                'verbose_name_plural': 'scan policies',
                'ordering': ('scan_type', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port_number', models.IntegerField(verbose_name='port')),
                ('port_proto', models.CharField(max_length=10, verbose_name='protocol')),
                ('service_name', models.CharField(blank=True, default='', max_length=255, verbose_name='service name')),
                ('product_name', models.CharField(blank=True, default='', max_length=255, verbose_name='product name')),
                ('product_version', models.CharField(blank=True, default='', max_length=50, verbose_name='product version')),
                ('product_extrainfo', models.TextField(blank=True, default='', help_text='Extra service info and/or raw scan output')),
                ('assessment_status_1', models.CharField(default='New', max_length=50, verbose_name='Test Status')),
                ('state', models.CharField(choices=[('up', 'Live'), ('dn', 'Down')], max_length=2, verbose_name='state')),
                ('state_reason', models.CharField(blank=True, default='', max_length=100, verbose_name='state reason')),
                ('category', models.CharField(blank=True, default='', max_length=100)),
                ('attack_value', models.SmallIntegerField(default=0, help_text='Attack value score 1-100', verbose_name='attack value')),
                ('notes', models.TextField(blank=True, default='')),
                ('date_discovered', models.DateTimeField(auto_now=True, help_text='Date first seen/scanned')),
                ('date_last_seen', models.DateTimeField(auto_now=True, help_text='Date last seen/scanned')),
                ('count_scanned', models.SmallIntegerField(default=1, help_text='Number of times this host & port has been scanned')),
                ('host_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scans.host', verbose_name='Host ID')),
                ('scan_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scans.scan', verbose_name='Scan ID')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
                'ordering': ('port_number',),
            },
        ),
        migrations.AddField(
            model_name='host',
            name='scan_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='scans.scan', verbose_name='Scan ID'),
        ),
    ]
